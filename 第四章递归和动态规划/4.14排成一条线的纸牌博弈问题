给定一个整型数组arr，代表数值不同的纸牌排成一条线，玩家A和玩家B依次拿走每张纸牌，规定玩家A先拿，玩家B后拿，
但是每个玩家每次只能拿走最左和最右的纸牌，玩家A和玩家B绝顶聪明。请返回最后的获胜者的分数。
暴力递归：
f(i,j)代表arr[i...j]先拿的分数；s(i,j)代表arr[i...j]后拿的分数
int f(vector<int> arr, int left, int right) {
	if (left == right) {
		return arr[left];
	}
	else
	{
		return max(arr[left] + s(arr, left + 1, right), arr[right] + s(arr, left, right - 1));
	}
}
int s(vector<int> arr, int left, int right) {
	if (left == right) {
		return 0;
	}
	else
	{
		return min(f(arr, left + 1, right), f(arr, left, right - 1));
	}
}
int scoremax(vector<int> arr) {
	if (arr.size() == 0 )
		return 0;
	return max(f(arr, 0, arr.size() - 1), s(arr, 0, arr.size() - 1));
}

动态规划：
在填表过程非常难以理解
int scoremax(vector<int> arr) {
	if (arr.size() == 0 )
		return 0;
	int N = arr.size();
	vector<vector<int>> f(N, vector<int>(N));
	vector<vector<int>> s(N, vector<int>(N));
	for (int j = 0; j < N; j++) {
		f[j][j] = arr[j];
		for (int i = j - 1 ; i >= 0; i--) {
			f[i][j] = max(arr[i] + s[i + 1][j], arr[j] + s[i][j - 1]);
			s[i][j] = min(f[i + 1][j], f[i][j - 1]);
		}
	}
	return max(f[0][N-1],s[0][N-1]);
}
