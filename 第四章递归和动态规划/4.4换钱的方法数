题目：求换钱的方法有多少种
     在最优子结构和状态转移方程处与最少的换钱张数不同
int numexchange(vector<int> arr, int aim) {
	if (aim < 0 || arr.size() == 0)
		return 0;
	int N = arr.size();
	vector<vector<int>> dp(N, vector<int>(aim + 1));
	for (int i = 0; i < N; i++) {
		dp[i][0] = 1;
	}
	for (int j = 1; arr[0] * j <= aim; j++) {
			dp[0][arr[0]*j] = 1;
	}
	for(int i = 1; i < N; i++) {
		for (int j = 1; j < aim + 1; j++) {
			dp[i][j] = dp[i - 1][j];
			if (j - arr[i] >= 0)
				dp[i][j] += dp[i][j - arr[i]];
		}
	}
	return dp[N - 1][aim];
}
空间压缩
int numexchange(vector<int> arr, int aim) {
	if (aim < 0 || arr.size() == 0)
		return 0;
	int N = arr.size();
	vector<int> dp(aim + 1);
	for (int j = 0; arr[0] * j <= aim; j++) {
		dp[arr[0] * j] = 1;
	}
	for (int i = 1; i < N; i++) {
		for (int j = 1; j < aim + 1; j++) {
			dp[j] += j - arr[i] > 0 ? dp[j - arr[i]] : 0;
		}
	}
	return dp[aim] % 1000000007;
}
