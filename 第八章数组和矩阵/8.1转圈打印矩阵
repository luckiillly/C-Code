题目：给定一个矩阵，按照转圈的方式打印它：
1 2 3 4
5 6 7 8
9 10 11 12
打印顺序为：1 2 3 4 8 12 11 10 9 5 6 7
左神代码中printedge分了三种情况，单行，单列，其他，我觉得单行，单列的情况能在四个while中完成（不需要单独判断是否为单行、单列）
在C++中使用vector<vector<int>> matrix较好，在使用二维数组时，要注意传参问题（除了第一维以外其他维在参数中要明确值）
使用vector<vector<int>>
#include<iostream>
#include<vector>
using namespace std;
void printedge(vector<vector<int>> array,int a,int b,int c,int d) {
	int curx = a;
	int cury = b;
	while (cury != d) {
		cout << array[a][cury++] << " ";
	}
	while (curx != c) {
		cout << array[curx++][d] << " ";
	}
	while (cury != b) {
		cout << array[c][cury--] << " ";
	}
	while (curx != a) {
		cout << array[curx--][b] << " ";
	}
}
void spiralorderprint(vector<vector<int>> array) {
	int ltx = 0, lty = 0;
	int rbx = array.size()-1, rby = array[0].size()-1;
	while (ltx <= rbx&&lty <= rby) {
		printedge(array,ltx++,lty++,rbx--,rby--);
	}
}

int main() {
	vector<vector<int>> matrix = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
	spiralorderprint(matrix);
	system("pause");
	return 0;
}

这里用了数组，参数要指明数组的大小（第一维可以为空）
#include<iostream>
using namespace std;
void printedge(int array[3][4],int a,int b,int c,int d) {
	int curx = a;
	int cury = b;
	while (cury != d) {
		cout << array[a][cury++] << " ";
	}
	while (curx != c) {
		cout << array[curx++][d] << " ";
	}
	while (cury != b) {
		cout << array[c][cury--] << " ";
	}
	while (curx != a) {
		cout << array[curx--][b] << " ";
	}
}
void spiralorderprint(int array[3][4]) {
	int ltx = 0, lty = 0;
	int rbx = 2, rby = 3;
	while (ltx <= rbx&&lty <= rby) {
		printedge(array,ltx++,lty++,rbx--,rby--);
	}
}

int main() {
	int a[3][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
	spiralorderprint(a);
	system("pause");
	return 0;
}
